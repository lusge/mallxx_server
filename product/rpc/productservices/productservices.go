// Code generated by goctl. DO NOT EDIT!
// Source: product.proto

package productservices

import (
	"context"

	"mallxx_server/product/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AttrRequest                            = pb.AttrRequest
	Brand                                  = pb.Brand
	BrandListResponse                      = pb.BrandListResponse
	BrandOneResponse                       = pb.BrandOneResponse
	BrandRequest                           = pb.BrandRequest
	BrandStatusRequest                     = pb.BrandStatusRequest
	Category                               = pb.Category
	CategoryAttrAndProductAttr             = pb.CategoryAttrAndProductAttr
	CategoryAttrAndProductAttrListResponse = pb.CategoryAttrAndProductAttrListResponse
	CategoryAttribute                      = pb.CategoryAttribute
	CategoryAttributeInfoResponse          = pb.CategoryAttributeInfoResponse
	CategoryAttributeListResponse          = pb.CategoryAttributeListResponse
	CategoryChangeStatus                   = pb.CategoryChangeStatus
	CategoryInfoResponse                   = pb.CategoryInfoResponse
	CategoryResponse                       = pb.CategoryResponse
	ListRequest                            = pb.ListRequest
	MemberPrice                            = pb.MemberPrice
	Product                                = pb.Product
	ProductApiRequest                      = pb.ProductApiRequest
	ProductAttribute                       = pb.ProductAttribute
	ProductAttributeInfoResponse           = pb.ProductAttributeInfoResponse
	ProductAttributeListResponse           = pb.ProductAttributeListResponse
	ProductAttributeValue                  = pb.ProductAttributeValue
	ProductChangeStatusRequest             = pb.ProductChangeStatusRequest
	ProductEmptyRequest                    = pb.ProductEmptyRequest
	ProductFullReduction                   = pb.ProductFullReduction
	ProductInfoRequest                     = pb.ProductInfoRequest
	ProductInfoResponse                    = pb.ProductInfoResponse
	ProductLadder                          = pb.ProductLadder
	ProductListRequest                     = pb.ProductListRequest
	ProductListRespone                     = pb.ProductListRespone
	ProductParameters                      = pb.ProductParameters
	ProductRecommend                       = pb.ProductRecommend
	ProductResponse                        = pb.ProductResponse
	RecommendListResponse                  = pb.RecommendListResponse
	RecommendRequest                       = pb.RecommendRequest
	RecommendSetSortRequest                = pb.RecommendSetSortRequest
	SkuStock                               = pb.SkuStock
	SkuStockListRequest                    = pb.SkuStockListRequest
	SkuStockListResponse                   = pb.SkuStockListResponse
	SkuStockRequest                        = pb.SkuStockRequest

	ProductServices interface {
		// Brand
		GetBrandList(ctx context.Context, in *BrandRequest, opts ...grpc.CallOption) (*BrandListResponse, error)
		GetBrandInfo(ctx context.Context, in *BrandRequest, opts ...grpc.CallOption) (*BrandOneResponse, error)
		UpdateBrandShowStatus(ctx context.Context, in *BrandStatusRequest, opts ...grpc.CallOption) (*ProductResponse, error)
		UpdateBrandFactoryStatus(ctx context.Context, in *BrandStatusRequest, opts ...grpc.CallOption) (*ProductResponse, error)
		DeleteBrand(ctx context.Context, in *BrandRequest, opts ...grpc.CallOption) (*ProductResponse, error)
		UpdateBrand(ctx context.Context, in *Brand, opts ...grpc.CallOption) (*ProductResponse, error)
		AddBrand(ctx context.Context, in *Brand, opts ...grpc.CallOption) (*ProductResponse, error)
		// CategoryAttribute
		GetCategoryAttributeList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*CategoryAttributeListResponse, error)
		GetCategoryAttributeInfo(ctx context.Context, in *CategoryAttribute, opts ...grpc.CallOption) (*CategoryAttributeInfoResponse, error)
		EditCategoryAttribute(ctx context.Context, in *CategoryAttribute, opts ...grpc.CallOption) (*ProductResponse, error)
		DelCategoryAttribute(ctx context.Context, in *CategoryAttribute, opts ...grpc.CallOption) (*ProductResponse, error)
		GetCategoryAttributeAndProductAttribute(ctx context.Context, in *ProductEmptyRequest, opts ...grpc.CallOption) (*CategoryAttrAndProductAttrListResponse, error)
		// Category
		GetCategoryList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*CategoryResponse, error)
		GetCategoryInfo(ctx context.Context, in *Category, opts ...grpc.CallOption) (*CategoryInfoResponse, error)
		CreateCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*ProductResponse, error)
		UpdateCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*ProductResponse, error)
		DelCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*ProductResponse, error)
		ChangeCategoryNavStatus(ctx context.Context, in *CategoryChangeStatus, opts ...grpc.CallOption) (*ProductResponse, error)
		ChangeCategoryShowStatus(ctx context.Context, in *CategoryChangeStatus, opts ...grpc.CallOption) (*ProductResponse, error)
		GetCategoryListWithChildren(ctx context.Context, in *ProductEmptyRequest, opts ...grpc.CallOption) (*CategoryResponse, error)
		// ProductAttribute
		GetProductAttributeList(ctx context.Context, in *AttrRequest, opts ...grpc.CallOption) (*ProductAttributeListResponse, error)
		AddProductAttribute(ctx context.Context, in *ProductAttribute, opts ...grpc.CallOption) (*ProductResponse, error)
		UpdateProductAttribute(ctx context.Context, in *ProductAttribute, opts ...grpc.CallOption) (*ProductResponse, error)
		DeleteProductAttribute(ctx context.Context, in *ProductAttribute, opts ...grpc.CallOption) (*ProductResponse, error)
		GetProductAttributeInfo(ctx context.Context, in *ProductAttribute, opts ...grpc.CallOption) (*ProductAttributeInfoResponse, error)
		// Product
		GetProductList(ctx context.Context, in *ProductListRequest, opts ...grpc.CallOption) (*ProductListRespone, error)
		GetProductInfo(ctx context.Context, in *ProductInfoRequest, opts ...grpc.CallOption) (*ProductInfoResponse, error)
		ChangeProductPublishStatus(ctx context.Context, in *ProductChangeStatusRequest, opts ...grpc.CallOption) (*ProductResponse, error)
		ChangeProductVerifyStatus(ctx context.Context, in *ProductChangeStatusRequest, opts ...grpc.CallOption) (*ProductResponse, error)
		ChangeProductNewStatus(ctx context.Context, in *ProductChangeStatusRequest, opts ...grpc.CallOption) (*ProductResponse, error)
		ChangeProductRecommendStatus(ctx context.Context, in *ProductChangeStatusRequest, opts ...grpc.CallOption) (*ProductResponse, error)
		AddProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*ProductResponse, error)
		UpdateProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*ProductResponse, error)
		DeleteProduct(ctx context.Context, in *ProductInfoRequest, opts ...grpc.CallOption) (*ProductResponse, error)
		GetProductApiList(ctx context.Context, in *ProductApiRequest, opts ...grpc.CallOption) (*ProductListRespone, error)
		// sku
		UpdateSku(ctx context.Context, in *SkuStockListRequest, opts ...grpc.CallOption) (*ProductResponse, error)
		GetSku(ctx context.Context, in *SkuStockRequest, opts ...grpc.CallOption) (*SkuStockListResponse, error)
		//  product recommend
		GetApiRecommendList(ctx context.Context, in *ProductListRequest, opts ...grpc.CallOption) (*ProductListRespone, error)
		GetRecommendList(ctx context.Context, in *ProductListRequest, opts ...grpc.CallOption) (*RecommendListResponse, error)
		SetRecommendSort(ctx context.Context, in *RecommendSetSortRequest, opts ...grpc.CallOption) (*ProductResponse, error)
		AddRecommend(ctx context.Context, in *RecommendRequest, opts ...grpc.CallOption) (*ProductResponse, error)
		DeleteRecommend(ctx context.Context, in *RecommendRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	}

	defaultProductServices struct {
		cli zrpc.Client
	}
)

func NewProductServices(cli zrpc.Client) ProductServices {
	return &defaultProductServices{
		cli: cli,
	}
}

// Brand
func (m *defaultProductServices) GetBrandList(ctx context.Context, in *BrandRequest, opts ...grpc.CallOption) (*BrandListResponse, error) {
	client := pb.NewProductServicesClient(m.cli.Conn())
	return client.GetBrandList(ctx, in, opts...)
}

func (m *defaultProductServices) GetBrandInfo(ctx context.Context, in *BrandRequest, opts ...grpc.CallOption) (*BrandOneResponse, error) {
	client := pb.NewProductServicesClient(m.cli.Conn())
	return client.GetBrandInfo(ctx, in, opts...)
}

func (m *defaultProductServices) UpdateBrandShowStatus(ctx context.Context, in *BrandStatusRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	client := pb.NewProductServicesClient(m.cli.Conn())
	return client.UpdateBrandShowStatus(ctx, in, opts...)
}

func (m *defaultProductServices) UpdateBrandFactoryStatus(ctx context.Context, in *BrandStatusRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	client := pb.NewProductServicesClient(m.cli.Conn())
	return client.UpdateBrandFactoryStatus(ctx, in, opts...)
}

func (m *defaultProductServices) DeleteBrand(ctx context.Context, in *BrandRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	client := pb.NewProductServicesClient(m.cli.Conn())
	return client.DeleteBrand(ctx, in, opts...)
}

func (m *defaultProductServices) UpdateBrand(ctx context.Context, in *Brand, opts ...grpc.CallOption) (*ProductResponse, error) {
	client := pb.NewProductServicesClient(m.cli.Conn())
	return client.UpdateBrand(ctx, in, opts...)
}

func (m *defaultProductServices) AddBrand(ctx context.Context, in *Brand, opts ...grpc.CallOption) (*ProductResponse, error) {
	client := pb.NewProductServicesClient(m.cli.Conn())
	return client.AddBrand(ctx, in, opts...)
}

// CategoryAttribute
func (m *defaultProductServices) GetCategoryAttributeList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*CategoryAttributeListResponse, error) {
	client := pb.NewProductServicesClient(m.cli.Conn())
	return client.GetCategoryAttributeList(ctx, in, opts...)
}

func (m *defaultProductServices) GetCategoryAttributeInfo(ctx context.Context, in *CategoryAttribute, opts ...grpc.CallOption) (*CategoryAttributeInfoResponse, error) {
	client := pb.NewProductServicesClient(m.cli.Conn())
	return client.GetCategoryAttributeInfo(ctx, in, opts...)
}

func (m *defaultProductServices) EditCategoryAttribute(ctx context.Context, in *CategoryAttribute, opts ...grpc.CallOption) (*ProductResponse, error) {
	client := pb.NewProductServicesClient(m.cli.Conn())
	return client.EditCategoryAttribute(ctx, in, opts...)
}

func (m *defaultProductServices) DelCategoryAttribute(ctx context.Context, in *CategoryAttribute, opts ...grpc.CallOption) (*ProductResponse, error) {
	client := pb.NewProductServicesClient(m.cli.Conn())
	return client.DelCategoryAttribute(ctx, in, opts...)
}

func (m *defaultProductServices) GetCategoryAttributeAndProductAttribute(ctx context.Context, in *ProductEmptyRequest, opts ...grpc.CallOption) (*CategoryAttrAndProductAttrListResponse, error) {
	client := pb.NewProductServicesClient(m.cli.Conn())
	return client.GetCategoryAttributeAndProductAttribute(ctx, in, opts...)
}

// Category
func (m *defaultProductServices) GetCategoryList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*CategoryResponse, error) {
	client := pb.NewProductServicesClient(m.cli.Conn())
	return client.GetCategoryList(ctx, in, opts...)
}

func (m *defaultProductServices) GetCategoryInfo(ctx context.Context, in *Category, opts ...grpc.CallOption) (*CategoryInfoResponse, error) {
	client := pb.NewProductServicesClient(m.cli.Conn())
	return client.GetCategoryInfo(ctx, in, opts...)
}

func (m *defaultProductServices) CreateCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*ProductResponse, error) {
	client := pb.NewProductServicesClient(m.cli.Conn())
	return client.CreateCategory(ctx, in, opts...)
}

func (m *defaultProductServices) UpdateCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*ProductResponse, error) {
	client := pb.NewProductServicesClient(m.cli.Conn())
	return client.UpdateCategory(ctx, in, opts...)
}

func (m *defaultProductServices) DelCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*ProductResponse, error) {
	client := pb.NewProductServicesClient(m.cli.Conn())
	return client.DelCategory(ctx, in, opts...)
}

func (m *defaultProductServices) ChangeCategoryNavStatus(ctx context.Context, in *CategoryChangeStatus, opts ...grpc.CallOption) (*ProductResponse, error) {
	client := pb.NewProductServicesClient(m.cli.Conn())
	return client.ChangeCategoryNavStatus(ctx, in, opts...)
}

func (m *defaultProductServices) ChangeCategoryShowStatus(ctx context.Context, in *CategoryChangeStatus, opts ...grpc.CallOption) (*ProductResponse, error) {
	client := pb.NewProductServicesClient(m.cli.Conn())
	return client.ChangeCategoryShowStatus(ctx, in, opts...)
}

func (m *defaultProductServices) GetCategoryListWithChildren(ctx context.Context, in *ProductEmptyRequest, opts ...grpc.CallOption) (*CategoryResponse, error) {
	client := pb.NewProductServicesClient(m.cli.Conn())
	return client.GetCategoryListWithChildren(ctx, in, opts...)
}

// ProductAttribute
func (m *defaultProductServices) GetProductAttributeList(ctx context.Context, in *AttrRequest, opts ...grpc.CallOption) (*ProductAttributeListResponse, error) {
	client := pb.NewProductServicesClient(m.cli.Conn())
	return client.GetProductAttributeList(ctx, in, opts...)
}

func (m *defaultProductServices) AddProductAttribute(ctx context.Context, in *ProductAttribute, opts ...grpc.CallOption) (*ProductResponse, error) {
	client := pb.NewProductServicesClient(m.cli.Conn())
	return client.AddProductAttribute(ctx, in, opts...)
}

func (m *defaultProductServices) UpdateProductAttribute(ctx context.Context, in *ProductAttribute, opts ...grpc.CallOption) (*ProductResponse, error) {
	client := pb.NewProductServicesClient(m.cli.Conn())
	return client.UpdateProductAttribute(ctx, in, opts...)
}

func (m *defaultProductServices) DeleteProductAttribute(ctx context.Context, in *ProductAttribute, opts ...grpc.CallOption) (*ProductResponse, error) {
	client := pb.NewProductServicesClient(m.cli.Conn())
	return client.DeleteProductAttribute(ctx, in, opts...)
}

func (m *defaultProductServices) GetProductAttributeInfo(ctx context.Context, in *ProductAttribute, opts ...grpc.CallOption) (*ProductAttributeInfoResponse, error) {
	client := pb.NewProductServicesClient(m.cli.Conn())
	return client.GetProductAttributeInfo(ctx, in, opts...)
}

// Product
func (m *defaultProductServices) GetProductList(ctx context.Context, in *ProductListRequest, opts ...grpc.CallOption) (*ProductListRespone, error) {
	client := pb.NewProductServicesClient(m.cli.Conn())
	return client.GetProductList(ctx, in, opts...)
}

func (m *defaultProductServices) GetProductInfo(ctx context.Context, in *ProductInfoRequest, opts ...grpc.CallOption) (*ProductInfoResponse, error) {
	client := pb.NewProductServicesClient(m.cli.Conn())
	return client.GetProductInfo(ctx, in, opts...)
}

func (m *defaultProductServices) ChangeProductPublishStatus(ctx context.Context, in *ProductChangeStatusRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	client := pb.NewProductServicesClient(m.cli.Conn())
	return client.ChangeProductPublishStatus(ctx, in, opts...)
}

func (m *defaultProductServices) ChangeProductVerifyStatus(ctx context.Context, in *ProductChangeStatusRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	client := pb.NewProductServicesClient(m.cli.Conn())
	return client.ChangeProductVerifyStatus(ctx, in, opts...)
}

func (m *defaultProductServices) ChangeProductNewStatus(ctx context.Context, in *ProductChangeStatusRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	client := pb.NewProductServicesClient(m.cli.Conn())
	return client.ChangeProductNewStatus(ctx, in, opts...)
}

func (m *defaultProductServices) ChangeProductRecommendStatus(ctx context.Context, in *ProductChangeStatusRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	client := pb.NewProductServicesClient(m.cli.Conn())
	return client.ChangeProductRecommendStatus(ctx, in, opts...)
}

func (m *defaultProductServices) AddProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*ProductResponse, error) {
	client := pb.NewProductServicesClient(m.cli.Conn())
	return client.AddProduct(ctx, in, opts...)
}

func (m *defaultProductServices) UpdateProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*ProductResponse, error) {
	client := pb.NewProductServicesClient(m.cli.Conn())
	return client.UpdateProduct(ctx, in, opts...)
}

func (m *defaultProductServices) DeleteProduct(ctx context.Context, in *ProductInfoRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	client := pb.NewProductServicesClient(m.cli.Conn())
	return client.DeleteProduct(ctx, in, opts...)
}

func (m *defaultProductServices) GetProductApiList(ctx context.Context, in *ProductApiRequest, opts ...grpc.CallOption) (*ProductListRespone, error) {
	client := pb.NewProductServicesClient(m.cli.Conn())
	return client.GetProductApiList(ctx, in, opts...)
}

// sku
func (m *defaultProductServices) UpdateSku(ctx context.Context, in *SkuStockListRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	client := pb.NewProductServicesClient(m.cli.Conn())
	return client.UpdateSku(ctx, in, opts...)
}

func (m *defaultProductServices) GetSku(ctx context.Context, in *SkuStockRequest, opts ...grpc.CallOption) (*SkuStockListResponse, error) {
	client := pb.NewProductServicesClient(m.cli.Conn())
	return client.GetSku(ctx, in, opts...)
}

//  product recommend
func (m *defaultProductServices) GetApiRecommendList(ctx context.Context, in *ProductListRequest, opts ...grpc.CallOption) (*ProductListRespone, error) {
	client := pb.NewProductServicesClient(m.cli.Conn())
	return client.GetApiRecommendList(ctx, in, opts...)
}

func (m *defaultProductServices) GetRecommendList(ctx context.Context, in *ProductListRequest, opts ...grpc.CallOption) (*RecommendListResponse, error) {
	client := pb.NewProductServicesClient(m.cli.Conn())
	return client.GetRecommendList(ctx, in, opts...)
}

func (m *defaultProductServices) SetRecommendSort(ctx context.Context, in *RecommendSetSortRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	client := pb.NewProductServicesClient(m.cli.Conn())
	return client.SetRecommendSort(ctx, in, opts...)
}

func (m *defaultProductServices) AddRecommend(ctx context.Context, in *RecommendRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	client := pb.NewProductServicesClient(m.cli.Conn())
	return client.AddRecommend(ctx, in, opts...)
}

func (m *defaultProductServices) DeleteRecommend(ctx context.Context, in *RecommendRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	client := pb.NewProductServicesClient(m.cli.Conn())
	return client.DeleteRecommend(ctx, in, opts...)
}
