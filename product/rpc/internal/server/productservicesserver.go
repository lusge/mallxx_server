// Code generated by goctl. DO NOT EDIT!
// Source: product.proto

package server

import (
	"context"

	"mallxx_server/product/rpc/internal/logic"
	"mallxx_server/product/rpc/internal/svc"
	"mallxx_server/product/rpc/pb"
)

type ProductServicesServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedProductServicesServer
}

func NewProductServicesServer(svcCtx *svc.ServiceContext) *ProductServicesServer {
	return &ProductServicesServer{
		svcCtx: svcCtx,
	}
}

// Brand
func (s *ProductServicesServer) GetBrandList(ctx context.Context, in *pb.BrandRequest) (*pb.BrandListResponse, error) {
	l := logic.NewGetBrandListLogic(ctx, s.svcCtx)
	return l.GetBrandList(in)
}

func (s *ProductServicesServer) GetBrandInfo(ctx context.Context, in *pb.BrandRequest) (*pb.BrandOneResponse, error) {
	l := logic.NewGetBrandInfoLogic(ctx, s.svcCtx)
	return l.GetBrandInfo(in)
}

func (s *ProductServicesServer) UpdateBrandShowStatus(ctx context.Context, in *pb.BrandStatusRequest) (*pb.Response, error) {
	l := logic.NewUpdateBrandShowStatusLogic(ctx, s.svcCtx)
	return l.UpdateBrandShowStatus(in)
}

func (s *ProductServicesServer) UpdateBrandFactoryStatus(ctx context.Context, in *pb.BrandStatusRequest) (*pb.Response, error) {
	l := logic.NewUpdateBrandFactoryStatusLogic(ctx, s.svcCtx)
	return l.UpdateBrandFactoryStatus(in)
}

func (s *ProductServicesServer) DeleteBrand(ctx context.Context, in *pb.BrandRequest) (*pb.Response, error) {
	l := logic.NewDeleteBrandLogic(ctx, s.svcCtx)
	return l.DeleteBrand(in)
}

func (s *ProductServicesServer) UpdateBrand(ctx context.Context, in *pb.Brand) (*pb.Response, error) {
	l := logic.NewUpdateBrandLogic(ctx, s.svcCtx)
	return l.UpdateBrand(in)
}

func (s *ProductServicesServer) AddBrand(ctx context.Context, in *pb.Brand) (*pb.Response, error) {
	l := logic.NewAddBrandLogic(ctx, s.svcCtx)
	return l.AddBrand(in)
}

// CategoryAttribute
func (s *ProductServicesServer) GetCategoryAttributeList(ctx context.Context, in *pb.ListRequest) (*pb.CategoryAttributeListResponse, error) {
	l := logic.NewGetCategoryAttributeListLogic(ctx, s.svcCtx)
	return l.GetCategoryAttributeList(in)
}

func (s *ProductServicesServer) GetCategoryAttributeInfo(ctx context.Context, in *pb.CategoryAttribute) (*pb.CategoryAttributeInfoResponse, error) {
	l := logic.NewGetCategoryAttributeInfoLogic(ctx, s.svcCtx)
	return l.GetCategoryAttributeInfo(in)
}

func (s *ProductServicesServer) EditCategoryAttribute(ctx context.Context, in *pb.CategoryAttribute) (*pb.Response, error) {
	l := logic.NewEditCategoryAttributeLogic(ctx, s.svcCtx)
	return l.EditCategoryAttribute(in)
}

func (s *ProductServicesServer) DelCategoryAttribute(ctx context.Context, in *pb.CategoryAttribute) (*pb.Response, error) {
	l := logic.NewDelCategoryAttributeLogic(ctx, s.svcCtx)
	return l.DelCategoryAttribute(in)
}

func (s *ProductServicesServer) GetCategoryAttributeAndProductAttribute(ctx context.Context, in *pb.EmptyRequest) (*pb.CategoryAttrAndProductAttrListResponse, error) {
	l := logic.NewGetCategoryAttributeAndProductAttributeLogic(ctx, s.svcCtx)
	return l.GetCategoryAttributeAndProductAttribute(in)
}

// Category
func (s *ProductServicesServer) GetCategoryList(ctx context.Context, in *pb.ListRequest) (*pb.CategoryResponse, error) {
	l := logic.NewGetCategoryListLogic(ctx, s.svcCtx)
	return l.GetCategoryList(in)
}

func (s *ProductServicesServer) GetCategoryInfo(ctx context.Context, in *pb.Category) (*pb.CategoryInfoResponse, error) {
	l := logic.NewGetCategoryInfoLogic(ctx, s.svcCtx)
	return l.GetCategoryInfo(in)
}

func (s *ProductServicesServer) CreateCategory(ctx context.Context, in *pb.Category) (*pb.Response, error) {
	l := logic.NewCreateCategoryLogic(ctx, s.svcCtx)
	return l.CreateCategory(in)
}

func (s *ProductServicesServer) UpdateCategory(ctx context.Context, in *pb.Category) (*pb.Response, error) {
	l := logic.NewUpdateCategoryLogic(ctx, s.svcCtx)
	return l.UpdateCategory(in)
}

func (s *ProductServicesServer) DelCategory(ctx context.Context, in *pb.Category) (*pb.Response, error) {
	l := logic.NewDelCategoryLogic(ctx, s.svcCtx)
	return l.DelCategory(in)
}

func (s *ProductServicesServer) ChangeCategoryNavStatus(ctx context.Context, in *pb.CategoryChangeStatus) (*pb.Response, error) {
	l := logic.NewChangeCategoryNavStatusLogic(ctx, s.svcCtx)
	return l.ChangeCategoryNavStatus(in)
}

func (s *ProductServicesServer) ChangeCategoryShowStatus(ctx context.Context, in *pb.CategoryChangeStatus) (*pb.Response, error) {
	l := logic.NewChangeCategoryShowStatusLogic(ctx, s.svcCtx)
	return l.ChangeCategoryShowStatus(in)
}

func (s *ProductServicesServer) GetCategoryListWithChildren(ctx context.Context, in *pb.EmptyRequest) (*pb.CategoryResponse, error) {
	l := logic.NewGetCategoryListWithChildrenLogic(ctx, s.svcCtx)
	return l.GetCategoryListWithChildren(in)
}

// ProductAttribute
func (s *ProductServicesServer) GetProductAttributeList(ctx context.Context, in *pb.AttrRequest) (*pb.ProductAttributeListResponse, error) {
	l := logic.NewGetProductAttributeListLogic(ctx, s.svcCtx)
	return l.GetProductAttributeList(in)
}

func (s *ProductServicesServer) AddProductAttribute(ctx context.Context, in *pb.ProductAttribute) (*pb.Response, error) {
	l := logic.NewAddProductAttributeLogic(ctx, s.svcCtx)
	return l.AddProductAttribute(in)
}

func (s *ProductServicesServer) UpdateProductAttribute(ctx context.Context, in *pb.ProductAttribute) (*pb.Response, error) {
	l := logic.NewUpdateProductAttributeLogic(ctx, s.svcCtx)
	return l.UpdateProductAttribute(in)
}

func (s *ProductServicesServer) DeleteProductAttribute(ctx context.Context, in *pb.ProductAttribute) (*pb.Response, error) {
	l := logic.NewDeleteProductAttributeLogic(ctx, s.svcCtx)
	return l.DeleteProductAttribute(in)
}

func (s *ProductServicesServer) GetProductAttributeInfo(ctx context.Context, in *pb.ProductAttribute) (*pb.ProductAttributeInfoResponse, error) {
	l := logic.NewGetProductAttributeInfoLogic(ctx, s.svcCtx)
	return l.GetProductAttributeInfo(in)
}

// Product
func (s *ProductServicesServer) GetProductList(ctx context.Context, in *pb.ProductListRequest) (*pb.ProductListRespone, error) {
	l := logic.NewGetProductListLogic(ctx, s.svcCtx)
	return l.GetProductList(in)
}

func (s *ProductServicesServer) GetProductInfo(ctx context.Context, in *pb.ProductInfoRequest) (*pb.ProductInfoResponse, error) {
	l := logic.NewGetProductInfoLogic(ctx, s.svcCtx)
	return l.GetProductInfo(in)
}

func (s *ProductServicesServer) ChangeProductPublishStatus(ctx context.Context, in *pb.ProductChangeStatusRequest) (*pb.Response, error) {
	l := logic.NewChangeProductPublishStatusLogic(ctx, s.svcCtx)
	return l.ChangeProductPublishStatus(in)
}

func (s *ProductServicesServer) ChangeProductVerifyStatus(ctx context.Context, in *pb.ProductChangeStatusRequest) (*pb.Response, error) {
	l := logic.NewChangeProductVerifyStatusLogic(ctx, s.svcCtx)
	return l.ChangeProductVerifyStatus(in)
}

func (s *ProductServicesServer) ChangeProductNewStatus(ctx context.Context, in *pb.ProductChangeStatusRequest) (*pb.Response, error) {
	l := logic.NewChangeProductNewStatusLogic(ctx, s.svcCtx)
	return l.ChangeProductNewStatus(in)
}

func (s *ProductServicesServer) ChangeProductRecommendStatus(ctx context.Context, in *pb.ProductChangeStatusRequest) (*pb.Response, error) {
	l := logic.NewChangeProductRecommendStatusLogic(ctx, s.svcCtx)
	return l.ChangeProductRecommendStatus(in)
}

func (s *ProductServicesServer) AddProduct(ctx context.Context, in *pb.Product) (*pb.Response, error) {
	l := logic.NewAddProductLogic(ctx, s.svcCtx)
	return l.AddProduct(in)
}

func (s *ProductServicesServer) UpdateProduct(ctx context.Context, in *pb.Product) (*pb.Response, error) {
	l := logic.NewUpdateProductLogic(ctx, s.svcCtx)
	return l.UpdateProduct(in)
}

func (s *ProductServicesServer) DeleteProduct(ctx context.Context, in *pb.ProductInfoRequest) (*pb.Response, error) {
	l := logic.NewDeleteProductLogic(ctx, s.svcCtx)
	return l.DeleteProduct(in)
}

func (s *ProductServicesServer) GetProductApiList(ctx context.Context, in *pb.ProductApiRequest) (*pb.ProductListRespone, error) {
	l := logic.NewGetProductApiListLogic(ctx, s.svcCtx)
	return l.GetProductApiList(in)
}

// sku
func (s *ProductServicesServer) UpdateSku(ctx context.Context, in *pb.SkuStockListRequest) (*pb.Response, error) {
	l := logic.NewUpdateSkuLogic(ctx, s.svcCtx)
	return l.UpdateSku(in)
}

func (s *ProductServicesServer) GetSku(ctx context.Context, in *pb.SkuStockRequest) (*pb.SkuStockListResponse, error) {
	l := logic.NewGetSkuLogic(ctx, s.svcCtx)
	return l.GetSku(in)
}

//  product recommend
func (s *ProductServicesServer) GetApiRecommendList(ctx context.Context, in *pb.ProductListRequest) (*pb.ProductListRespone, error) {
	l := logic.NewGetApiRecommendListLogic(ctx, s.svcCtx)
	return l.GetApiRecommendList(in)
}

func (s *ProductServicesServer) GetRecommendList(ctx context.Context, in *pb.ProductListRequest) (*pb.RecommendListResponse, error) {
	l := logic.NewGetRecommendListLogic(ctx, s.svcCtx)
	return l.GetRecommendList(in)
}

func (s *ProductServicesServer) SetRecommendSort(ctx context.Context, in *pb.RecommendSetSortRequest) (*pb.Response, error) {
	l := logic.NewSetRecommendSortLogic(ctx, s.svcCtx)
	return l.SetRecommendSort(in)
}

func (s *ProductServicesServer) AddRecommend(ctx context.Context, in *pb.RecommendRequest) (*pb.Response, error) {
	l := logic.NewAddRecommendLogic(ctx, s.svcCtx)
	return l.AddRecommend(in)
}

func (s *ProductServicesServer) DeleteRecommend(ctx context.Context, in *pb.RecommendRequest) (*pb.Response, error) {
	l := logic.NewDeleteRecommendLogic(ctx, s.svcCtx)
	return l.DeleteRecommend(in)
}
