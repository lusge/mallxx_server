// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductServicesClient is the client API for ProductServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductServicesClient interface {
	//Brand
	GetBrandList(ctx context.Context, in *BrandRequest, opts ...grpc.CallOption) (*BrandListResponse, error)
	GetBrandInfo(ctx context.Context, in *BrandRequest, opts ...grpc.CallOption) (*BrandOneResponse, error)
	UpdateBrandShowStatus(ctx context.Context, in *BrandStatusRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateBrandFactoryStatus(ctx context.Context, in *BrandStatusRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteBrand(ctx context.Context, in *BrandRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateBrand(ctx context.Context, in *Brand, opts ...grpc.CallOption) (*Response, error)
	AddBrand(ctx context.Context, in *Brand, opts ...grpc.CallOption) (*Response, error)
	//CategoryAttribute
	//---------------------分类属性-------------------------------------------------
	GetCategoryAttributeList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*CategoryAttributeListResponse, error)
	GetCategoryAttributeInfo(ctx context.Context, in *CategoryAttribute, opts ...grpc.CallOption) (*CategoryAttributeInfoResponse, error)
	EditCategoryAttribute(ctx context.Context, in *CategoryAttribute, opts ...grpc.CallOption) (*Response, error)
	DelCategoryAttribute(ctx context.Context, in *CategoryAttribute, opts ...grpc.CallOption) (*Response, error)
	GetCategoryAttributeAndProductAttribute(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CategoryAttrAndProductAttrListResponse, error)
	//Category
	GetCategoryList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*CategoryResponse, error)
	GetCategoryInfo(ctx context.Context, in *Category, opts ...grpc.CallOption) (*CategoryInfoResponse, error)
	CreateCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*Response, error)
	UpdateCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*Response, error)
	DelCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*Response, error)
	ChangeCategoryNavStatus(ctx context.Context, in *CategoryChangeStatus, opts ...grpc.CallOption) (*Response, error)
	ChangeCategoryShowStatus(ctx context.Context, in *CategoryChangeStatus, opts ...grpc.CallOption) (*Response, error)
	GetCategoryListWithChildren(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CategoryResponse, error)
	//ProductAttribute
	GetProductAttributeList(ctx context.Context, in *AttrRequest, opts ...grpc.CallOption) (*ProductAttributeListResponse, error)
	AddProductAttribute(ctx context.Context, in *ProductAttribute, opts ...grpc.CallOption) (*Response, error)
	UpdateProductAttribute(ctx context.Context, in *ProductAttribute, opts ...grpc.CallOption) (*Response, error)
	DeleteProductAttribute(ctx context.Context, in *ProductAttribute, opts ...grpc.CallOption) (*Response, error)
	GetProductAttributeInfo(ctx context.Context, in *ProductAttribute, opts ...grpc.CallOption) (*ProductAttributeInfoResponse, error)
	//Product
	GetProductList(ctx context.Context, in *ProductListRequest, opts ...grpc.CallOption) (*ProductListRespone, error)
	GetProductInfo(ctx context.Context, in *ProductInfoRequest, opts ...grpc.CallOption) (*ProductInfoResponse, error)
	ChangeProductPublishStatus(ctx context.Context, in *ProductChangeStatusRequest, opts ...grpc.CallOption) (*Response, error)
	ChangeProductVerifyStatus(ctx context.Context, in *ProductChangeStatusRequest, opts ...grpc.CallOption) (*Response, error)
	ChangeProductNewStatus(ctx context.Context, in *ProductChangeStatusRequest, opts ...grpc.CallOption) (*Response, error)
	ChangeProductRecommendStatus(ctx context.Context, in *ProductChangeStatusRequest, opts ...grpc.CallOption) (*Response, error)
	AddProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Response, error)
	UpdateProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Response, error)
	DeleteProduct(ctx context.Context, in *ProductInfoRequest, opts ...grpc.CallOption) (*Response, error)
	GetProductApiList(ctx context.Context, in *ProductApiRequest, opts ...grpc.CallOption) (*ProductListRespone, error)
	//sku
	UpdateSku(ctx context.Context, in *SkuStockListRequest, opts ...grpc.CallOption) (*Response, error)
	GetSku(ctx context.Context, in *SkuStockRequest, opts ...grpc.CallOption) (*SkuStockListResponse, error)
	// product recommend
	GetApiRecommendList(ctx context.Context, in *ProductListRequest, opts ...grpc.CallOption) (*ProductListRespone, error)
	GetRecommendList(ctx context.Context, in *ProductListRequest, opts ...grpc.CallOption) (*RecommendListResponse, error)
	SetRecommendSort(ctx context.Context, in *RecommendSetSortRequest, opts ...grpc.CallOption) (*Response, error)
	AddRecommend(ctx context.Context, in *RecommendRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteRecommend(ctx context.Context, in *RecommendRequest, opts ...grpc.CallOption) (*Response, error)
}

type productServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewProductServicesClient(cc grpc.ClientConnInterface) ProductServicesClient {
	return &productServicesClient{cc}
}

func (c *productServicesClient) GetBrandList(ctx context.Context, in *BrandRequest, opts ...grpc.CallOption) (*BrandListResponse, error) {
	out := new(BrandListResponse)
	err := c.cc.Invoke(ctx, "/pb.ProductServices/GetBrandList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServicesClient) GetBrandInfo(ctx context.Context, in *BrandRequest, opts ...grpc.CallOption) (*BrandOneResponse, error) {
	out := new(BrandOneResponse)
	err := c.cc.Invoke(ctx, "/pb.ProductServices/GetBrandInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServicesClient) UpdateBrandShowStatus(ctx context.Context, in *BrandStatusRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.ProductServices/UpdateBrandShowStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServicesClient) UpdateBrandFactoryStatus(ctx context.Context, in *BrandStatusRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.ProductServices/UpdateBrandFactoryStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServicesClient) DeleteBrand(ctx context.Context, in *BrandRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.ProductServices/DeleteBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServicesClient) UpdateBrand(ctx context.Context, in *Brand, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.ProductServices/UpdateBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServicesClient) AddBrand(ctx context.Context, in *Brand, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.ProductServices/AddBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServicesClient) GetCategoryAttributeList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*CategoryAttributeListResponse, error) {
	out := new(CategoryAttributeListResponse)
	err := c.cc.Invoke(ctx, "/pb.ProductServices/GetCategoryAttributeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServicesClient) GetCategoryAttributeInfo(ctx context.Context, in *CategoryAttribute, opts ...grpc.CallOption) (*CategoryAttributeInfoResponse, error) {
	out := new(CategoryAttributeInfoResponse)
	err := c.cc.Invoke(ctx, "/pb.ProductServices/GetCategoryAttributeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServicesClient) EditCategoryAttribute(ctx context.Context, in *CategoryAttribute, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.ProductServices/EditCategoryAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServicesClient) DelCategoryAttribute(ctx context.Context, in *CategoryAttribute, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.ProductServices/DelCategoryAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServicesClient) GetCategoryAttributeAndProductAttribute(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CategoryAttrAndProductAttrListResponse, error) {
	out := new(CategoryAttrAndProductAttrListResponse)
	err := c.cc.Invoke(ctx, "/pb.ProductServices/GetCategoryAttributeAndProductAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServicesClient) GetCategoryList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*CategoryResponse, error) {
	out := new(CategoryResponse)
	err := c.cc.Invoke(ctx, "/pb.ProductServices/GetCategoryList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServicesClient) GetCategoryInfo(ctx context.Context, in *Category, opts ...grpc.CallOption) (*CategoryInfoResponse, error) {
	out := new(CategoryInfoResponse)
	err := c.cc.Invoke(ctx, "/pb.ProductServices/GetCategoryInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServicesClient) CreateCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.ProductServices/CreateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServicesClient) UpdateCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.ProductServices/UpdateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServicesClient) DelCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.ProductServices/DelCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServicesClient) ChangeCategoryNavStatus(ctx context.Context, in *CategoryChangeStatus, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.ProductServices/ChangeCategoryNavStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServicesClient) ChangeCategoryShowStatus(ctx context.Context, in *CategoryChangeStatus, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.ProductServices/ChangeCategoryShowStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServicesClient) GetCategoryListWithChildren(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CategoryResponse, error) {
	out := new(CategoryResponse)
	err := c.cc.Invoke(ctx, "/pb.ProductServices/GetCategoryListWithChildren", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServicesClient) GetProductAttributeList(ctx context.Context, in *AttrRequest, opts ...grpc.CallOption) (*ProductAttributeListResponse, error) {
	out := new(ProductAttributeListResponse)
	err := c.cc.Invoke(ctx, "/pb.ProductServices/GetProductAttributeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServicesClient) AddProductAttribute(ctx context.Context, in *ProductAttribute, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.ProductServices/AddProductAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServicesClient) UpdateProductAttribute(ctx context.Context, in *ProductAttribute, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.ProductServices/UpdateProductAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServicesClient) DeleteProductAttribute(ctx context.Context, in *ProductAttribute, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.ProductServices/DeleteProductAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServicesClient) GetProductAttributeInfo(ctx context.Context, in *ProductAttribute, opts ...grpc.CallOption) (*ProductAttributeInfoResponse, error) {
	out := new(ProductAttributeInfoResponse)
	err := c.cc.Invoke(ctx, "/pb.ProductServices/GetProductAttributeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServicesClient) GetProductList(ctx context.Context, in *ProductListRequest, opts ...grpc.CallOption) (*ProductListRespone, error) {
	out := new(ProductListRespone)
	err := c.cc.Invoke(ctx, "/pb.ProductServices/GetProductList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServicesClient) GetProductInfo(ctx context.Context, in *ProductInfoRequest, opts ...grpc.CallOption) (*ProductInfoResponse, error) {
	out := new(ProductInfoResponse)
	err := c.cc.Invoke(ctx, "/pb.ProductServices/GetProductInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServicesClient) ChangeProductPublishStatus(ctx context.Context, in *ProductChangeStatusRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.ProductServices/ChangeProductPublishStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServicesClient) ChangeProductVerifyStatus(ctx context.Context, in *ProductChangeStatusRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.ProductServices/ChangeProductVerifyStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServicesClient) ChangeProductNewStatus(ctx context.Context, in *ProductChangeStatusRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.ProductServices/ChangeProductNewStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServicesClient) ChangeProductRecommendStatus(ctx context.Context, in *ProductChangeStatusRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.ProductServices/ChangeProductRecommendStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServicesClient) AddProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.ProductServices/AddProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServicesClient) UpdateProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.ProductServices/UpdateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServicesClient) DeleteProduct(ctx context.Context, in *ProductInfoRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.ProductServices/DeleteProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServicesClient) GetProductApiList(ctx context.Context, in *ProductApiRequest, opts ...grpc.CallOption) (*ProductListRespone, error) {
	out := new(ProductListRespone)
	err := c.cc.Invoke(ctx, "/pb.ProductServices/GetProductApiList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServicesClient) UpdateSku(ctx context.Context, in *SkuStockListRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.ProductServices/UpdateSku", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServicesClient) GetSku(ctx context.Context, in *SkuStockRequest, opts ...grpc.CallOption) (*SkuStockListResponse, error) {
	out := new(SkuStockListResponse)
	err := c.cc.Invoke(ctx, "/pb.ProductServices/GetSku", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServicesClient) GetApiRecommendList(ctx context.Context, in *ProductListRequest, opts ...grpc.CallOption) (*ProductListRespone, error) {
	out := new(ProductListRespone)
	err := c.cc.Invoke(ctx, "/pb.ProductServices/GetApiRecommendList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServicesClient) GetRecommendList(ctx context.Context, in *ProductListRequest, opts ...grpc.CallOption) (*RecommendListResponse, error) {
	out := new(RecommendListResponse)
	err := c.cc.Invoke(ctx, "/pb.ProductServices/GetRecommendList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServicesClient) SetRecommendSort(ctx context.Context, in *RecommendSetSortRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.ProductServices/SetRecommendSort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServicesClient) AddRecommend(ctx context.Context, in *RecommendRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.ProductServices/AddRecommend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServicesClient) DeleteRecommend(ctx context.Context, in *RecommendRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.ProductServices/DeleteRecommend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServicesServer is the server API for ProductServices service.
// All implementations must embed UnimplementedProductServicesServer
// for forward compatibility
type ProductServicesServer interface {
	//Brand
	GetBrandList(context.Context, *BrandRequest) (*BrandListResponse, error)
	GetBrandInfo(context.Context, *BrandRequest) (*BrandOneResponse, error)
	UpdateBrandShowStatus(context.Context, *BrandStatusRequest) (*Response, error)
	UpdateBrandFactoryStatus(context.Context, *BrandStatusRequest) (*Response, error)
	DeleteBrand(context.Context, *BrandRequest) (*Response, error)
	UpdateBrand(context.Context, *Brand) (*Response, error)
	AddBrand(context.Context, *Brand) (*Response, error)
	//CategoryAttribute
	//---------------------分类属性-------------------------------------------------
	GetCategoryAttributeList(context.Context, *ListRequest) (*CategoryAttributeListResponse, error)
	GetCategoryAttributeInfo(context.Context, *CategoryAttribute) (*CategoryAttributeInfoResponse, error)
	EditCategoryAttribute(context.Context, *CategoryAttribute) (*Response, error)
	DelCategoryAttribute(context.Context, *CategoryAttribute) (*Response, error)
	GetCategoryAttributeAndProductAttribute(context.Context, *EmptyRequest) (*CategoryAttrAndProductAttrListResponse, error)
	//Category
	GetCategoryList(context.Context, *ListRequest) (*CategoryResponse, error)
	GetCategoryInfo(context.Context, *Category) (*CategoryInfoResponse, error)
	CreateCategory(context.Context, *Category) (*Response, error)
	UpdateCategory(context.Context, *Category) (*Response, error)
	DelCategory(context.Context, *Category) (*Response, error)
	ChangeCategoryNavStatus(context.Context, *CategoryChangeStatus) (*Response, error)
	ChangeCategoryShowStatus(context.Context, *CategoryChangeStatus) (*Response, error)
	GetCategoryListWithChildren(context.Context, *EmptyRequest) (*CategoryResponse, error)
	//ProductAttribute
	GetProductAttributeList(context.Context, *AttrRequest) (*ProductAttributeListResponse, error)
	AddProductAttribute(context.Context, *ProductAttribute) (*Response, error)
	UpdateProductAttribute(context.Context, *ProductAttribute) (*Response, error)
	DeleteProductAttribute(context.Context, *ProductAttribute) (*Response, error)
	GetProductAttributeInfo(context.Context, *ProductAttribute) (*ProductAttributeInfoResponse, error)
	//Product
	GetProductList(context.Context, *ProductListRequest) (*ProductListRespone, error)
	GetProductInfo(context.Context, *ProductInfoRequest) (*ProductInfoResponse, error)
	ChangeProductPublishStatus(context.Context, *ProductChangeStatusRequest) (*Response, error)
	ChangeProductVerifyStatus(context.Context, *ProductChangeStatusRequest) (*Response, error)
	ChangeProductNewStatus(context.Context, *ProductChangeStatusRequest) (*Response, error)
	ChangeProductRecommendStatus(context.Context, *ProductChangeStatusRequest) (*Response, error)
	AddProduct(context.Context, *Product) (*Response, error)
	UpdateProduct(context.Context, *Product) (*Response, error)
	DeleteProduct(context.Context, *ProductInfoRequest) (*Response, error)
	GetProductApiList(context.Context, *ProductApiRequest) (*ProductListRespone, error)
	//sku
	UpdateSku(context.Context, *SkuStockListRequest) (*Response, error)
	GetSku(context.Context, *SkuStockRequest) (*SkuStockListResponse, error)
	// product recommend
	GetApiRecommendList(context.Context, *ProductListRequest) (*ProductListRespone, error)
	GetRecommendList(context.Context, *ProductListRequest) (*RecommendListResponse, error)
	SetRecommendSort(context.Context, *RecommendSetSortRequest) (*Response, error)
	AddRecommend(context.Context, *RecommendRequest) (*Response, error)
	DeleteRecommend(context.Context, *RecommendRequest) (*Response, error)
	mustEmbedUnimplementedProductServicesServer()
}

// UnimplementedProductServicesServer must be embedded to have forward compatible implementations.
type UnimplementedProductServicesServer struct {
}

func (UnimplementedProductServicesServer) GetBrandList(context.Context, *BrandRequest) (*BrandListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrandList not implemented")
}
func (UnimplementedProductServicesServer) GetBrandInfo(context.Context, *BrandRequest) (*BrandOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrandInfo not implemented")
}
func (UnimplementedProductServicesServer) UpdateBrandShowStatus(context.Context, *BrandStatusRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBrandShowStatus not implemented")
}
func (UnimplementedProductServicesServer) UpdateBrandFactoryStatus(context.Context, *BrandStatusRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBrandFactoryStatus not implemented")
}
func (UnimplementedProductServicesServer) DeleteBrand(context.Context, *BrandRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBrand not implemented")
}
func (UnimplementedProductServicesServer) UpdateBrand(context.Context, *Brand) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBrand not implemented")
}
func (UnimplementedProductServicesServer) AddBrand(context.Context, *Brand) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBrand not implemented")
}
func (UnimplementedProductServicesServer) GetCategoryAttributeList(context.Context, *ListRequest) (*CategoryAttributeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryAttributeList not implemented")
}
func (UnimplementedProductServicesServer) GetCategoryAttributeInfo(context.Context, *CategoryAttribute) (*CategoryAttributeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryAttributeInfo not implemented")
}
func (UnimplementedProductServicesServer) EditCategoryAttribute(context.Context, *CategoryAttribute) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditCategoryAttribute not implemented")
}
func (UnimplementedProductServicesServer) DelCategoryAttribute(context.Context, *CategoryAttribute) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelCategoryAttribute not implemented")
}
func (UnimplementedProductServicesServer) GetCategoryAttributeAndProductAttribute(context.Context, *EmptyRequest) (*CategoryAttrAndProductAttrListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryAttributeAndProductAttribute not implemented")
}
func (UnimplementedProductServicesServer) GetCategoryList(context.Context, *ListRequest) (*CategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryList not implemented")
}
func (UnimplementedProductServicesServer) GetCategoryInfo(context.Context, *Category) (*CategoryInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryInfo not implemented")
}
func (UnimplementedProductServicesServer) CreateCategory(context.Context, *Category) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedProductServicesServer) UpdateCategory(context.Context, *Category) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedProductServicesServer) DelCategory(context.Context, *Category) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelCategory not implemented")
}
func (UnimplementedProductServicesServer) ChangeCategoryNavStatus(context.Context, *CategoryChangeStatus) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeCategoryNavStatus not implemented")
}
func (UnimplementedProductServicesServer) ChangeCategoryShowStatus(context.Context, *CategoryChangeStatus) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeCategoryShowStatus not implemented")
}
func (UnimplementedProductServicesServer) GetCategoryListWithChildren(context.Context, *EmptyRequest) (*CategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryListWithChildren not implemented")
}
func (UnimplementedProductServicesServer) GetProductAttributeList(context.Context, *AttrRequest) (*ProductAttributeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductAttributeList not implemented")
}
func (UnimplementedProductServicesServer) AddProductAttribute(context.Context, *ProductAttribute) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductAttribute not implemented")
}
func (UnimplementedProductServicesServer) UpdateProductAttribute(context.Context, *ProductAttribute) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductAttribute not implemented")
}
func (UnimplementedProductServicesServer) DeleteProductAttribute(context.Context, *ProductAttribute) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductAttribute not implemented")
}
func (UnimplementedProductServicesServer) GetProductAttributeInfo(context.Context, *ProductAttribute) (*ProductAttributeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductAttributeInfo not implemented")
}
func (UnimplementedProductServicesServer) GetProductList(context.Context, *ProductListRequest) (*ProductListRespone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductList not implemented")
}
func (UnimplementedProductServicesServer) GetProductInfo(context.Context, *ProductInfoRequest) (*ProductInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductInfo not implemented")
}
func (UnimplementedProductServicesServer) ChangeProductPublishStatus(context.Context, *ProductChangeStatusRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeProductPublishStatus not implemented")
}
func (UnimplementedProductServicesServer) ChangeProductVerifyStatus(context.Context, *ProductChangeStatusRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeProductVerifyStatus not implemented")
}
func (UnimplementedProductServicesServer) ChangeProductNewStatus(context.Context, *ProductChangeStatusRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeProductNewStatus not implemented")
}
func (UnimplementedProductServicesServer) ChangeProductRecommendStatus(context.Context, *ProductChangeStatusRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeProductRecommendStatus not implemented")
}
func (UnimplementedProductServicesServer) AddProduct(context.Context, *Product) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProduct not implemented")
}
func (UnimplementedProductServicesServer) UpdateProduct(context.Context, *Product) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedProductServicesServer) DeleteProduct(context.Context, *ProductInfoRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedProductServicesServer) GetProductApiList(context.Context, *ProductApiRequest) (*ProductListRespone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductApiList not implemented")
}
func (UnimplementedProductServicesServer) UpdateSku(context.Context, *SkuStockListRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSku not implemented")
}
func (UnimplementedProductServicesServer) GetSku(context.Context, *SkuStockRequest) (*SkuStockListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSku not implemented")
}
func (UnimplementedProductServicesServer) GetApiRecommendList(context.Context, *ProductListRequest) (*ProductListRespone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiRecommendList not implemented")
}
func (UnimplementedProductServicesServer) GetRecommendList(context.Context, *ProductListRequest) (*RecommendListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendList not implemented")
}
func (UnimplementedProductServicesServer) SetRecommendSort(context.Context, *RecommendSetSortRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRecommendSort not implemented")
}
func (UnimplementedProductServicesServer) AddRecommend(context.Context, *RecommendRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRecommend not implemented")
}
func (UnimplementedProductServicesServer) DeleteRecommend(context.Context, *RecommendRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecommend not implemented")
}
func (UnimplementedProductServicesServer) mustEmbedUnimplementedProductServicesServer() {}

// UnsafeProductServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServicesServer will
// result in compilation errors.
type UnsafeProductServicesServer interface {
	mustEmbedUnimplementedProductServicesServer()
}

func RegisterProductServicesServer(s grpc.ServiceRegistrar, srv ProductServicesServer) {
	s.RegisterService(&ProductServices_ServiceDesc, srv)
}

func _ProductServices_GetBrandList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServicesServer).GetBrandList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductServices/GetBrandList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServicesServer).GetBrandList(ctx, req.(*BrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServices_GetBrandInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServicesServer).GetBrandInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductServices/GetBrandInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServicesServer).GetBrandInfo(ctx, req.(*BrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServices_UpdateBrandShowStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServicesServer).UpdateBrandShowStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductServices/UpdateBrandShowStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServicesServer).UpdateBrandShowStatus(ctx, req.(*BrandStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServices_UpdateBrandFactoryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServicesServer).UpdateBrandFactoryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductServices/UpdateBrandFactoryStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServicesServer).UpdateBrandFactoryStatus(ctx, req.(*BrandStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServices_DeleteBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServicesServer).DeleteBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductServices/DeleteBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServicesServer).DeleteBrand(ctx, req.(*BrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServices_UpdateBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Brand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServicesServer).UpdateBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductServices/UpdateBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServicesServer).UpdateBrand(ctx, req.(*Brand))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServices_AddBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Brand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServicesServer).AddBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductServices/AddBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServicesServer).AddBrand(ctx, req.(*Brand))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServices_GetCategoryAttributeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServicesServer).GetCategoryAttributeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductServices/GetCategoryAttributeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServicesServer).GetCategoryAttributeList(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServices_GetCategoryAttributeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryAttribute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServicesServer).GetCategoryAttributeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductServices/GetCategoryAttributeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServicesServer).GetCategoryAttributeInfo(ctx, req.(*CategoryAttribute))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServices_EditCategoryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryAttribute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServicesServer).EditCategoryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductServices/EditCategoryAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServicesServer).EditCategoryAttribute(ctx, req.(*CategoryAttribute))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServices_DelCategoryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryAttribute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServicesServer).DelCategoryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductServices/DelCategoryAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServicesServer).DelCategoryAttribute(ctx, req.(*CategoryAttribute))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServices_GetCategoryAttributeAndProductAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServicesServer).GetCategoryAttributeAndProductAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductServices/GetCategoryAttributeAndProductAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServicesServer).GetCategoryAttributeAndProductAttribute(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServices_GetCategoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServicesServer).GetCategoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductServices/GetCategoryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServicesServer).GetCategoryList(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServices_GetCategoryInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Category)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServicesServer).GetCategoryInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductServices/GetCategoryInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServicesServer).GetCategoryInfo(ctx, req.(*Category))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServices_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Category)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServicesServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductServices/CreateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServicesServer).CreateCategory(ctx, req.(*Category))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServices_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Category)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServicesServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductServices/UpdateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServicesServer).UpdateCategory(ctx, req.(*Category))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServices_DelCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Category)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServicesServer).DelCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductServices/DelCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServicesServer).DelCategory(ctx, req.(*Category))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServices_ChangeCategoryNavStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryChangeStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServicesServer).ChangeCategoryNavStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductServices/ChangeCategoryNavStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServicesServer).ChangeCategoryNavStatus(ctx, req.(*CategoryChangeStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServices_ChangeCategoryShowStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryChangeStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServicesServer).ChangeCategoryShowStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductServices/ChangeCategoryShowStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServicesServer).ChangeCategoryShowStatus(ctx, req.(*CategoryChangeStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServices_GetCategoryListWithChildren_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServicesServer).GetCategoryListWithChildren(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductServices/GetCategoryListWithChildren",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServicesServer).GetCategoryListWithChildren(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServices_GetProductAttributeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServicesServer).GetProductAttributeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductServices/GetProductAttributeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServicesServer).GetProductAttributeList(ctx, req.(*AttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServices_AddProductAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductAttribute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServicesServer).AddProductAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductServices/AddProductAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServicesServer).AddProductAttribute(ctx, req.(*ProductAttribute))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServices_UpdateProductAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductAttribute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServicesServer).UpdateProductAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductServices/UpdateProductAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServicesServer).UpdateProductAttribute(ctx, req.(*ProductAttribute))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServices_DeleteProductAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductAttribute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServicesServer).DeleteProductAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductServices/DeleteProductAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServicesServer).DeleteProductAttribute(ctx, req.(*ProductAttribute))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServices_GetProductAttributeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductAttribute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServicesServer).GetProductAttributeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductServices/GetProductAttributeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServicesServer).GetProductAttributeInfo(ctx, req.(*ProductAttribute))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServices_GetProductList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServicesServer).GetProductList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductServices/GetProductList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServicesServer).GetProductList(ctx, req.(*ProductListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServices_GetProductInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServicesServer).GetProductInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductServices/GetProductInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServicesServer).GetProductInfo(ctx, req.(*ProductInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServices_ChangeProductPublishStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductChangeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServicesServer).ChangeProductPublishStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductServices/ChangeProductPublishStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServicesServer).ChangeProductPublishStatus(ctx, req.(*ProductChangeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServices_ChangeProductVerifyStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductChangeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServicesServer).ChangeProductVerifyStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductServices/ChangeProductVerifyStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServicesServer).ChangeProductVerifyStatus(ctx, req.(*ProductChangeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServices_ChangeProductNewStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductChangeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServicesServer).ChangeProductNewStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductServices/ChangeProductNewStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServicesServer).ChangeProductNewStatus(ctx, req.(*ProductChangeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServices_ChangeProductRecommendStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductChangeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServicesServer).ChangeProductRecommendStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductServices/ChangeProductRecommendStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServicesServer).ChangeProductRecommendStatus(ctx, req.(*ProductChangeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServices_AddProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServicesServer).AddProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductServices/AddProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServicesServer).AddProduct(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServices_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServicesServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductServices/UpdateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServicesServer).UpdateProduct(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServices_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServicesServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductServices/DeleteProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServicesServer).DeleteProduct(ctx, req.(*ProductInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServices_GetProductApiList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductApiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServicesServer).GetProductApiList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductServices/GetProductApiList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServicesServer).GetProductApiList(ctx, req.(*ProductApiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServices_UpdateSku_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkuStockListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServicesServer).UpdateSku(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductServices/UpdateSku",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServicesServer).UpdateSku(ctx, req.(*SkuStockListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServices_GetSku_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkuStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServicesServer).GetSku(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductServices/GetSku",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServicesServer).GetSku(ctx, req.(*SkuStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServices_GetApiRecommendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServicesServer).GetApiRecommendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductServices/GetApiRecommendList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServicesServer).GetApiRecommendList(ctx, req.(*ProductListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServices_GetRecommendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServicesServer).GetRecommendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductServices/GetRecommendList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServicesServer).GetRecommendList(ctx, req.(*ProductListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServices_SetRecommendSort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecommendSetSortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServicesServer).SetRecommendSort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductServices/SetRecommendSort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServicesServer).SetRecommendSort(ctx, req.(*RecommendSetSortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServices_AddRecommend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecommendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServicesServer).AddRecommend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductServices/AddRecommend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServicesServer).AddRecommend(ctx, req.(*RecommendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductServices_DeleteRecommend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecommendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServicesServer).DeleteRecommend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductServices/DeleteRecommend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServicesServer).DeleteRecommend(ctx, req.(*RecommendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductServices_ServiceDesc is the grpc.ServiceDesc for ProductServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ProductServices",
	HandlerType: (*ProductServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBrandList",
			Handler:    _ProductServices_GetBrandList_Handler,
		},
		{
			MethodName: "GetBrandInfo",
			Handler:    _ProductServices_GetBrandInfo_Handler,
		},
		{
			MethodName: "UpdateBrandShowStatus",
			Handler:    _ProductServices_UpdateBrandShowStatus_Handler,
		},
		{
			MethodName: "UpdateBrandFactoryStatus",
			Handler:    _ProductServices_UpdateBrandFactoryStatus_Handler,
		},
		{
			MethodName: "DeleteBrand",
			Handler:    _ProductServices_DeleteBrand_Handler,
		},
		{
			MethodName: "UpdateBrand",
			Handler:    _ProductServices_UpdateBrand_Handler,
		},
		{
			MethodName: "AddBrand",
			Handler:    _ProductServices_AddBrand_Handler,
		},
		{
			MethodName: "GetCategoryAttributeList",
			Handler:    _ProductServices_GetCategoryAttributeList_Handler,
		},
		{
			MethodName: "GetCategoryAttributeInfo",
			Handler:    _ProductServices_GetCategoryAttributeInfo_Handler,
		},
		{
			MethodName: "EditCategoryAttribute",
			Handler:    _ProductServices_EditCategoryAttribute_Handler,
		},
		{
			MethodName: "DelCategoryAttribute",
			Handler:    _ProductServices_DelCategoryAttribute_Handler,
		},
		{
			MethodName: "GetCategoryAttributeAndProductAttribute",
			Handler:    _ProductServices_GetCategoryAttributeAndProductAttribute_Handler,
		},
		{
			MethodName: "GetCategoryList",
			Handler:    _ProductServices_GetCategoryList_Handler,
		},
		{
			MethodName: "GetCategoryInfo",
			Handler:    _ProductServices_GetCategoryInfo_Handler,
		},
		{
			MethodName: "CreateCategory",
			Handler:    _ProductServices_CreateCategory_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _ProductServices_UpdateCategory_Handler,
		},
		{
			MethodName: "DelCategory",
			Handler:    _ProductServices_DelCategory_Handler,
		},
		{
			MethodName: "ChangeCategoryNavStatus",
			Handler:    _ProductServices_ChangeCategoryNavStatus_Handler,
		},
		{
			MethodName: "ChangeCategoryShowStatus",
			Handler:    _ProductServices_ChangeCategoryShowStatus_Handler,
		},
		{
			MethodName: "GetCategoryListWithChildren",
			Handler:    _ProductServices_GetCategoryListWithChildren_Handler,
		},
		{
			MethodName: "GetProductAttributeList",
			Handler:    _ProductServices_GetProductAttributeList_Handler,
		},
		{
			MethodName: "AddProductAttribute",
			Handler:    _ProductServices_AddProductAttribute_Handler,
		},
		{
			MethodName: "UpdateProductAttribute",
			Handler:    _ProductServices_UpdateProductAttribute_Handler,
		},
		{
			MethodName: "DeleteProductAttribute",
			Handler:    _ProductServices_DeleteProductAttribute_Handler,
		},
		{
			MethodName: "GetProductAttributeInfo",
			Handler:    _ProductServices_GetProductAttributeInfo_Handler,
		},
		{
			MethodName: "GetProductList",
			Handler:    _ProductServices_GetProductList_Handler,
		},
		{
			MethodName: "GetProductInfo",
			Handler:    _ProductServices_GetProductInfo_Handler,
		},
		{
			MethodName: "ChangeProductPublishStatus",
			Handler:    _ProductServices_ChangeProductPublishStatus_Handler,
		},
		{
			MethodName: "ChangeProductVerifyStatus",
			Handler:    _ProductServices_ChangeProductVerifyStatus_Handler,
		},
		{
			MethodName: "ChangeProductNewStatus",
			Handler:    _ProductServices_ChangeProductNewStatus_Handler,
		},
		{
			MethodName: "ChangeProductRecommendStatus",
			Handler:    _ProductServices_ChangeProductRecommendStatus_Handler,
		},
		{
			MethodName: "AddProduct",
			Handler:    _ProductServices_AddProduct_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _ProductServices_UpdateProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _ProductServices_DeleteProduct_Handler,
		},
		{
			MethodName: "GetProductApiList",
			Handler:    _ProductServices_GetProductApiList_Handler,
		},
		{
			MethodName: "UpdateSku",
			Handler:    _ProductServices_UpdateSku_Handler,
		},
		{
			MethodName: "GetSku",
			Handler:    _ProductServices_GetSku_Handler,
		},
		{
			MethodName: "GetApiRecommendList",
			Handler:    _ProductServices_GetApiRecommendList_Handler,
		},
		{
			MethodName: "GetRecommendList",
			Handler:    _ProductServices_GetRecommendList_Handler,
		},
		{
			MethodName: "SetRecommendSort",
			Handler:    _ProductServices_SetRecommendSort_Handler,
		},
		{
			MethodName: "AddRecommend",
			Handler:    _ProductServices_AddRecommend_Handler,
		},
		{
			MethodName: "DeleteRecommend",
			Handler:    _ProductServices_DeleteRecommend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product.proto",
}
