// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	brand "mallxx_server/product/api/internal/handler/brand"
	category "mallxx_server/product/api/internal/handler/category"
	categoryAttribute "mallxx_server/product/api/internal/handler/categoryAttribute"
	product "mallxx_server/product/api/internal/handler/product"
	productAttribute "mallxx_server/product/api/internal/handler/productAttribute"
	recommend "mallxx_server/product/api/internal/handler/recommend"
	sku "mallxx_server/product/api/internal/handler/sku"
	"mallxx_server/product/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: brand.GetBrandListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/info",
				Handler: brand.GetBrandInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/update/show/status",
				Handler: brand.UpdateBrandShowStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/update/factory/status",
				Handler: brand.UpdateBrandFactoryStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/delete",
				Handler: brand.DeleteBrandHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/update",
				Handler: brand.UpdateBrandHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: brand.AddBrandHandler(serverCtx),
			},
		},
		rest.WithPrefix("/product/brand"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: categoryAttribute.GetCategoryAttributeListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/info",
				Handler: categoryAttribute.GetCategoryAttributeInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/edit",
				Handler: categoryAttribute.EditCategoryAttributeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/delete",
				Handler: categoryAttribute.DelCategoryAttributeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/and/product/attr",
				Handler: categoryAttribute.GetCategoryAttributeAndProductAttributeHandler(serverCtx),
			},
		},
		rest.WithPrefix("/product/categoryAttribute"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: category.GetCategoryListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/info",
				Handler: category.GetCategoryInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: category.AddCategoryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/update",
				Handler: category.UpdateCategoryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/delete",
				Handler: category.DelCategoryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/change/nav/status",
				Handler: category.ChangeCategoryNavStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/change/show/status",
				Handler: category.ChangeCategoryShowStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list/children",
				Handler: category.GetCategoryListWithChildrenHandler(serverCtx),
			},
		},
		rest.WithPrefix("/product/category"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: productAttribute.GetProductAttributeListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: productAttribute.AddProductAttributeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/update",
				Handler: productAttribute.UpdateProductAttributeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/delete",
				Handler: productAttribute.DeleteProductAttributeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/info",
				Handler: productAttribute.GetProductAttributeInfoHandler(serverCtx),
			},
		},
		rest.WithPrefix("/product/productAttribute"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: product.GetProductListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/info",
				Handler: product.GetProductInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/change/publish-status",
				Handler: product.ChangeProductPublishStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/change/verify-status",
				Handler: product.ChangeProductVerifyStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/change/new-status",
				Handler: product.ChangeProductNewStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/change/recommend-status",
				Handler: product.ChangeProductRecommendStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: product.AddProductHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/update",
				Handler: product.UpdateProductHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/delete",
				Handler: product.DeleteProductHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/list",
				Handler: product.GetProductApiListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/product/product"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/update",
				Handler: sku.UpdateSkuHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: sku.GetSkuHandler(serverCtx),
			},
		},
		rest.WithPrefix("/product/sku"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/api/list",
				Handler: recommend.GetApiRecommendListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: recommend.GetRecommendListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/set/sort",
				Handler: recommend.SetRecommendSortHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: recommend.AddRecommendHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/delete",
				Handler: recommend.DeleteRecommendHandler(serverCtx),
			},
		},
		rest.WithPrefix("/product/recommend"),
	)
}
