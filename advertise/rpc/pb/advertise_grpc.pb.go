// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdvertiseServiceClient is the client API for AdvertiseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdvertiseServiceClient interface {
	AdminGetList(ctx context.Context, in *AdRequest, opts ...grpc.CallOption) (*AdResponse, error)
	ApiGetList(ctx context.Context, in *AdRequest, opts ...grpc.CallOption) (*AdResponse, error)
	GetInfo(ctx context.Context, in *AdOneRequest, opts ...grpc.CallOption) (*AdInfoResponse, error)
	Add(ctx context.Context, in *Advertise, opts ...grpc.CallOption) (*Response, error)
	Delete(ctx context.Context, in *AdOneRequest, opts ...grpc.CallOption) (*Response, error)
	Update(ctx context.Context, in *Advertise, opts ...grpc.CallOption) (*Response, error)
}

type advertiseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdvertiseServiceClient(cc grpc.ClientConnInterface) AdvertiseServiceClient {
	return &advertiseServiceClient{cc}
}

func (c *advertiseServiceClient) AdminGetList(ctx context.Context, in *AdRequest, opts ...grpc.CallOption) (*AdResponse, error) {
	out := new(AdResponse)
	err := c.cc.Invoke(ctx, "/pb.AdvertiseService/AdminGetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *advertiseServiceClient) ApiGetList(ctx context.Context, in *AdRequest, opts ...grpc.CallOption) (*AdResponse, error) {
	out := new(AdResponse)
	err := c.cc.Invoke(ctx, "/pb.AdvertiseService/ApiGetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *advertiseServiceClient) GetInfo(ctx context.Context, in *AdOneRequest, opts ...grpc.CallOption) (*AdInfoResponse, error) {
	out := new(AdInfoResponse)
	err := c.cc.Invoke(ctx, "/pb.AdvertiseService/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *advertiseServiceClient) Add(ctx context.Context, in *Advertise, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.AdvertiseService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *advertiseServiceClient) Delete(ctx context.Context, in *AdOneRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.AdvertiseService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *advertiseServiceClient) Update(ctx context.Context, in *Advertise, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.AdvertiseService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdvertiseServiceServer is the server API for AdvertiseService service.
// All implementations must embed UnimplementedAdvertiseServiceServer
// for forward compatibility
type AdvertiseServiceServer interface {
	AdminGetList(context.Context, *AdRequest) (*AdResponse, error)
	ApiGetList(context.Context, *AdRequest) (*AdResponse, error)
	GetInfo(context.Context, *AdOneRequest) (*AdInfoResponse, error)
	Add(context.Context, *Advertise) (*Response, error)
	Delete(context.Context, *AdOneRequest) (*Response, error)
	Update(context.Context, *Advertise) (*Response, error)
	mustEmbedUnimplementedAdvertiseServiceServer()
}

// UnimplementedAdvertiseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdvertiseServiceServer struct {
}

func (UnimplementedAdvertiseServiceServer) AdminGetList(context.Context, *AdRequest) (*AdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetList not implemented")
}
func (UnimplementedAdvertiseServiceServer) ApiGetList(context.Context, *AdRequest) (*AdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiGetList not implemented")
}
func (UnimplementedAdvertiseServiceServer) GetInfo(context.Context, *AdOneRequest) (*AdInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedAdvertiseServiceServer) Add(context.Context, *Advertise) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedAdvertiseServiceServer) Delete(context.Context, *AdOneRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAdvertiseServiceServer) Update(context.Context, *Advertise) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAdvertiseServiceServer) mustEmbedUnimplementedAdvertiseServiceServer() {}

// UnsafeAdvertiseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdvertiseServiceServer will
// result in compilation errors.
type UnsafeAdvertiseServiceServer interface {
	mustEmbedUnimplementedAdvertiseServiceServer()
}

func RegisterAdvertiseServiceServer(s grpc.ServiceRegistrar, srv AdvertiseServiceServer) {
	s.RegisterService(&AdvertiseService_ServiceDesc, srv)
}

func _AdvertiseService_AdminGetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvertiseServiceServer).AdminGetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdvertiseService/AdminGetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvertiseServiceServer).AdminGetList(ctx, req.(*AdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdvertiseService_ApiGetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvertiseServiceServer).ApiGetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdvertiseService/ApiGetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvertiseServiceServer).ApiGetList(ctx, req.(*AdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdvertiseService_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvertiseServiceServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdvertiseService/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvertiseServiceServer).GetInfo(ctx, req.(*AdOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdvertiseService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Advertise)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvertiseServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdvertiseService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvertiseServiceServer).Add(ctx, req.(*Advertise))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdvertiseService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvertiseServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdvertiseService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvertiseServiceServer).Delete(ctx, req.(*AdOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdvertiseService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Advertise)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvertiseServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdvertiseService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvertiseServiceServer).Update(ctx, req.(*Advertise))
	}
	return interceptor(ctx, in, info, handler)
}

// AdvertiseService_ServiceDesc is the grpc.ServiceDesc for AdvertiseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdvertiseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AdvertiseService",
	HandlerType: (*AdvertiseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdminGetList",
			Handler:    _AdvertiseService_AdminGetList_Handler,
		},
		{
			MethodName: "ApiGetList",
			Handler:    _AdvertiseService_ApiGetList_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _AdvertiseService_GetInfo_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _AdvertiseService_Add_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AdvertiseService_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AdvertiseService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "advertise.proto",
}
