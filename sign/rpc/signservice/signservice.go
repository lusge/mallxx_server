// Code generated by goctl. DO NOT EDIT!
// Source: sign.proto

package signservice

import (
	"context"

	"mallxx_server/sign/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Member             = pb.Member
	MemberData         = pb.MemberData
	MemberLevel        = pb.MemberLevel
	MemberLoginRequest = pb.MemberLoginRequest
	MemberResponse     = pb.MemberResponse
	Response           = pb.Response
	SignTokenRequest   = pb.SignTokenRequest

	SignService interface {
		Login(ctx context.Context, in *MemberLoginRequest, opts ...grpc.CallOption) (*MemberResponse, error)
		Register(ctx context.Context, in *Member, opts ...grpc.CallOption) (*MemberResponse, error)
		VerifyToken(ctx context.Context, in *SignTokenRequest, opts ...grpc.CallOption) (*Response, error)
		CleanToken(ctx context.Context, in *SignTokenRequest, opts ...grpc.CallOption) (*Response, error)
	}

	defaultSignService struct {
		cli zrpc.Client
	}
)

func NewSignService(cli zrpc.Client) SignService {
	return &defaultSignService{
		cli: cli,
	}
}

func (m *defaultSignService) Login(ctx context.Context, in *MemberLoginRequest, opts ...grpc.CallOption) (*MemberResponse, error) {
	client := pb.NewSignServiceClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultSignService) Register(ctx context.Context, in *Member, opts ...grpc.CallOption) (*MemberResponse, error) {
	client := pb.NewSignServiceClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultSignService) VerifyToken(ctx context.Context, in *SignTokenRequest, opts ...grpc.CallOption) (*Response, error) {
	client := pb.NewSignServiceClient(m.cli.Conn())
	return client.VerifyToken(ctx, in, opts...)
}

func (m *defaultSignService) CleanToken(ctx context.Context, in *SignTokenRequest, opts ...grpc.CallOption) (*Response, error) {
	client := pb.NewSignServiceClient(m.cli.Conn())
	return client.CleanToken(ctx, in, opts...)
}
